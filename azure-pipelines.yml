trigger:
  - main

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NuGetAuthenticate@1
      displayName: 'NuGet Authenticate'
    
    - task: UseDotNet@2
      inputs:
        version: '8.x'
        includePreviewVersions: false
        
    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet'

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'
        feedsToUse: 'config'
        nugetConfigPath: 'nuget.config'

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration)'

    # Add explicit copy of local.settings.json
    - task: CopyFiles@2
      displayName: 'Copy local.settings.json to output'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**/local.settings.json'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        flattenFolders: true

    - task: DotNetCoreCLI@2
      displayName: 'Publish'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/DopamineDetoxFunction.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:GenerateRuntimeConfigurationFiles=true'
        modifyOutputPath: true
        zipAfterPublish: true

    # Add explicit PowerShell task to verify files
    - task: PowerShell@2
      displayName: 'Verify Build Output'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Listing contents of ArtifactStagingDirectory:"
          Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)" -Recurse | ForEach-Object { Write-Host $_.FullName }

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'

- stage: DeployToTest
  dependsOn: Build
  condition: succeeded()
  variables:
    - group: SMD-Test-Variables
  jobs:
  - deployment: Deploy
    environment: 'test'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: 'SMD-KeyVault'
              KeyVaultName: 'test-key-vault-v2'
              SecretsFilter: 'SMD--AzureSignalRConnectionString,SMD--YouTubeApiKey,ProjectDb--SQL-DefaultConnectionString'
              RunAsPreJob: false

          - task: PowerShell@2
            displayName: 'Extract Settings for Transform'
            inputs:
              targetType: 'inline'
              script: |
                # List workspace contents
                Write-Host "Listing Pipeline.Workspace contents:"
                Get-ChildItem -Path "$(Pipeline.Workspace)" -Recurse | ForEach-Object { Write-Host $_.FullName }
                
                $zipPath = Get-ChildItem -Path "$(Pipeline.Workspace)/drop" -Filter *.zip | Select-Object -First 1 -ExpandProperty FullName
                Write-Host "Found zip file at: $zipPath"
                
                # Create a temp directory
                $tempDir = Join-Path "$(Pipeline.Workspace)" "temp"
                New-Item -ItemType Directory -Path $tempDir -Force
                
                # Extract and inspect zip contents
                Add-Type -AssemblyName System.IO.Compression.FileSystem
                $zip = [System.IO.Compression.ZipFile]::OpenRead($zipPath)
                
                Write-Host "Listing all files in zip:"
                $zip.Entries | ForEach-Object { Write-Host $_.FullName }
                
                # Look for settings file in any directory
                $settingsEntry = $zip.Entries | Where-Object { $_.Name -eq "local.settings.json" }
                if ($settingsEntry) {
                    Write-Host "Found settings file at path: $($settingsEntry.FullName)"
                    $settingsFile = [System.IO.Path]::Combine($tempDir, "local.settings.json")
                    Write-Host "Extracting to: $settingsFile"
                    $settingsEntry.ExtractToFile($settingsFile, $true)
                } else {
                    Write-Host "WARNING: Could not find local.settings.json in the zip file"
                    # Copy the separately published settings file if it exists
                    $settingsFile = Get-ChildItem -Path "$(Pipeline.Workspace)/drop" -Filter local.settings.json | Select-Object -First 1
                    if ($settingsFile) {
                        Write-Host "Found settings file in drop folder, copying to temp directory"
                        Copy-Item -Path $settingsFile.FullName -Destination $tempDir
                    }
                }
                $zip.Dispose()
                
                Write-Host "Temp directory contents after extraction:"
                Get-ChildItem -Path $tempDir -Recurse | ForEach-Object { Write-Host $_.FullName }

          - task: FileTransform@1
            inputs:
              folderPath: '$(Pipeline.Workspace)/temp'
              fileType: 'json'
              targetFiles: '**/local.settings.json'

          - task: PowerShell@2
            displayName: 'Update Zip with Transformed Settings'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "Looking for transformed settings file..."
                $transformedSettings = Get-ChildItem -Path "$(Pipeline.Workspace)/temp" -Filter local.settings.json -Recurse | Select-Object -First 1
                
                if ($transformedSettings) {
                    Write-Host "Found transformed settings at: $($transformedSettings.FullName)"
                    
                    $zipPath = Get-ChildItem -Path "$(Pipeline.Workspace)/drop" -Filter *.zip | Select-Object -First 1 -ExpandProperty FullName
                    Write-Host "Updating zip file at: $zipPath"
                    
                    Add-Type -AssemblyName System.IO.Compression.FileSystem
                    $zip = [System.IO.Compression.ZipFile]::Open($zipPath, 'Update')
                    
                    Write-Host "Listing zip contents before update:"
                    $zip.Entries | ForEach-Object { Write-Host $_.FullName }
                    
                    $settingsEntry = $zip.GetEntry("local.settings.json")
                    if ($settingsEntry) {
                        Write-Host "Deleting existing settings file from zip"
                        $settingsEntry.Delete()
                    }
                    
                    Write-Host "Adding transformed settings to zip"
                    [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zip, $transformedSettings.FullName, "local.settings.json")
                    
                    $zip.Dispose()
                    Write-Host "Zip file updated successfully"
                } else {
                    Write-Host "WARNING: Could not find transformed settings file"
                }
              
          - task: AzureAppServiceManage@0
            displayName: 'Stop Function App'
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              Action: 'Stop Azure App Service'
              WebAppName: 'smd-function-test'
              SpecifySlotOrASE: false
              
          - task: AzureFunctionApp@2
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              appName: 'smd-function-test'
              appType: 'functionApp'
              package: '$(Pipeline.Workspace)/drop/*.zip'
              deploymentMethod: 'auto'
              enableGoogleAnalytics: false
              
          - task: AzureAppServiceManage@0
            displayName: 'Start Function App'
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              Action: 'Start Azure App Service'
              WebAppName: 'smd-function-test'
              SpecifySlotOrASE: false

- stage: DeployToProduction
  dependsOn: DeployToTest
  condition: succeeded()
  variables:
    - group: SMD-Prod-Variables
  jobs:
  - deployment: Deploy
    environment: 'production'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: 'SMD-KeyVault'
              KeyVaultName: 'prod-key-vault-v1'
              SecretsFilter: 'SMD--AzureSignalRConnectionString,SMD--YouTubeApiKey,ProjectDb--SQL-DefaultConnectionString'
              RunAsPreJob: false

          - task: PowerShell@2
            displayName: 'Extract Settings for Transform'
            inputs:
              targetType: 'inline'
              script: |
                # List workspace contents
                Write-Host "Listing Pipeline.Workspace contents:"
                Get-ChildItem -Path "$(Pipeline.Workspace)" -Recurse | ForEach-Object { Write-Host $_.FullName }
                
                $zipPath = Get-ChildItem -Path "$(Pipeline.Workspace)/drop" -Filter *.zip | Select-Object -First 1 -ExpandProperty FullName
                Write-Host "Found zip file at: $zipPath"
                
                # Create a temp directory
                $tempDir = Join-Path "$(Pipeline.Workspace)" "temp"
                New-Item -ItemType Directory -Path $tempDir -Force
                
                # Extract and inspect zip contents
                Add-Type -AssemblyName System.IO.Compression.FileSystem
                $zip = [System.IO.Compression.ZipFile]::OpenRead($zipPath)
                
                Write-Host "Listing all files in zip:"
                $zip.Entries | ForEach-Object { Write-Host $_.FullName }
                
                # Look for settings file in any directory
                $settingsEntry = $zip.Entries | Where-Object { $_.Name -eq "local.settings.json" }
                if ($settingsEntry) {
                    Write-Host "Found settings file at path: $($settingsEntry.FullName)"
                    $settingsFile = [System.IO.Path]::Combine($tempDir, "local.settings.json")
                    Write-Host "Extracting to: $settingsFile"
                    $settingsEntry.ExtractToFile($settingsFile, $true)
                } else {
                    Write-Host "WARNING: Could not find local.settings.json in the zip file"
                    # Copy the separately published settings file if it exists
                    $settingsFile = Get-ChildItem -Path "$(Pipeline.Workspace)/drop" -Filter local.settings.json | Select-Object -First 1
                    if ($settingsFile) {
                        Write-Host "Found settings file in drop folder, copying to temp directory"
                        Copy-Item -Path $settingsFile.FullName -Destination $tempDir
                    }
                }
                $zip.Dispose()
                
                Write-Host "Temp directory contents after extraction:"
                Get-ChildItem -Path $tempDir -Recurse | ForEach-Object { Write-Host $_.FullName }

          - task: FileTransform@1
            inputs:
              folderPath: '$(Pipeline.Workspace)/temp'
              fileType: 'json'
              targetFiles: '**/local.settings.json'

          - task: PowerShell@2
            displayName: 'Update Zip with Transformed Settings'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "Looking for transformed settings file..."
                $transformedSettings = Get-ChildItem -Path "$(Pipeline.Workspace)/temp" -Filter local.settings.json -Recurse | Select-Object -First 1
                
                if ($transformedSettings) {
                    Write-Host "Found transformed settings at: $($transformedSettings.FullName)"
                    
                    $zipPath = Get-ChildItem -Path "$(Pipeline.Workspace)/drop" -Filter *.zip | Select-Object -First 1 -ExpandProperty FullName
                    Write-Host "Updating zip file at: $zipPath"
                    
                    Add-Type -AssemblyName System.IO.Compression.FileSystem
                    $zip = [System.IO.Compression.ZipFile]::Open($zipPath, 'Update')
                    
                    Write-Host "Listing zip contents before update:"
                    $zip.Entries | ForEach-Object { Write-Host $_.FullName }
                    
                    $settingsEntry = $zip.GetEntry("local.settings.json")
                    if ($settingsEntry) {
                        Write-Host "Deleting existing settings file from zip"
                        $settingsEntry.Delete()
                    }
                    
                    Write-Host "Adding transformed settings to zip"
                    [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zip, $transformedSettings.FullName, "local.settings.json")
                    
                    $zip.Dispose()
                    Write-Host "Zip file updated successfully"
                } else {
                    Write-Host "WARNING: Could not find transformed settings file"
                }
              
          - task: AzureAppServiceManage@0
            displayName: 'Stop Function App'
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              Action: 'Stop Azure App Service'
              WebAppName: 'smd-function-prod'
              SpecifySlotOrASE: false
              
          - task: AzureFunctionApp@2
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              appName: 'smd-function-prod'
              appType: 'functionApp'
              package: '$(Pipeline.Workspace)/drop/*.zip'
              deploymentMethod: 'auto'
              enableGoogleAnalytics: false
              
          - task: AzureAppServiceManage@0
            displayName: 'Start Function App'
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              Action: 'Start Azure App Service'
              WebAppName: 'smd-function-prod'
              SpecifySlotOrASE: false