trigger:
  - main

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NuGetAuthenticate@1
      displayName: 'NuGet Authenticate'
    
    - task: UseDotNet@2
      inputs:
        version: '8.x'
        includePreviewVersions: false
        
    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet'

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'
        feedsToUse: 'config'
        nugetConfigPath: 'nuget.config'

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Publish'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/DopamineDetoxFunction.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'

- stage: DeployToTest
  dependsOn: Build
  condition: succeeded()
  variables:
    - group: SMD-Test-Variables
  jobs:
  - deployment: Deploy
    environment: 'test'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: 'SMD-KeyVault'
              KeyVaultName: 'test-key-vault-v2'
              SecretsFilter: 'SMD--AzureSignalRConnectionString,SMD--YouTubeApiKey,ProjectDb--SQL-DefaultConnectionString'
              RunAsPreJob: false

          - task: PowerShell@2
            displayName: 'Extract Settings for Transform'
            inputs:
              targetType: 'inline'
              script: |
                $zipPath = Get-ChildItem -Path "$(Pipeline.Workspace)/drop" -Filter *.zip | Select-Object -First 1 -ExpandProperty FullName
                Write-Host "Found zip file at: $zipPath"
                
                # Create a temp directory
                $tempDir = Join-Path "$(Pipeline.Workspace)" "temp"
                New-Item -ItemType Directory -Path $tempDir -Force
                
                # Extract just the settings file
                Add-Type -AssemblyName System.IO.Compression.FileSystem
                $zip = [System.IO.Compression.ZipFile]::OpenRead($zipPath)
                $settingsEntry = $zip.Entries | Where-Object { $_.Name -eq "local.settings.json" }
                if ($settingsEntry) {
                    $settingsEntry.ExtractToFile([System.IO.Path]::Combine($tempDir, "local.settings.json"), $true)
                }
                $zip.Dispose()
                
                Write-Host "Extracted settings file for transformation"

          - task: FileTransform@1
            inputs:
              folderPath: '$(Pipeline.Workspace)/temp'
              fileType: 'json'
              targetFiles: '**/local.settings.json'

          - task: PowerShell@2
            displayName: 'Update Zip with Transformed Settings'
            inputs:
              targetType: 'inline'
              script: |
                $zipPath = Get-ChildItem -Path "$(Pipeline.Workspace)/drop" -Filter *.zip | Select-Object -First 1 -ExpandProperty FullName
                $transformedSettings = Get-ChildItem -Path "$(Pipeline.Workspace)/temp" -Filter local.settings.json -Recurse | Select-Object -First 1
                
                Add-Type -AssemblyName System.IO.Compression.FileSystem
                $zip = [System.IO.Compression.ZipFile]::Open($zipPath, 'Update')
                $settingsEntry = $zip.GetEntry("local.settings.json")
                if ($settingsEntry) {
                    $settingsEntry.Delete()
                }
                [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zip, $transformedSettings.FullName, "local.settings.json")
                $zip.Dispose()
                
                Write-Host "Updated zip file with transformed settings"
              
          - task: AzureAppServiceManage@0
            displayName: 'Stop Function App'
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              Action: 'Stop Azure App Service'
              WebAppName: 'smd-function-test'
              SpecifySlotOrASE: false
              
          - task: AzureFunctionApp@2
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              appName: 'smd-function-test'
              appType: 'functionApp'
              package: '$(Pipeline.Workspace)/drop/*.zip'
              deploymentMethod: 'auto'
              enableGoogleAnalytics: false
              appSettings: >-
                -FUNCTIONS_WORKER_RUNTIME dotnet-isolated 
                -DOTNET_ISOLATED_RUNTIME_VERSION 8.0 
                -FUNCTIONS_EXTENSION_VERSION ~4
              
          - task: AzureAppServiceManage@0
            displayName: 'Start Function App'
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              Action: 'Start Azure App Service'
              WebAppName: 'smd-function-test'
              SpecifySlotOrASE: false

- stage: DeployToProduction
  dependsOn: DeployToTest
  condition: succeeded()
  variables:
    - group: SMD-Prod-Variables
  jobs:
  - deployment: Deploy
    environment: 'production'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: 'SMD-KeyVault'
              KeyVaultName: 'prod-key-vault-v1'
              SecretsFilter: 'SMD--AzureSignalRConnectionString,SMD--YouTubeApiKey,ProjectDb--SQL-DefaultConnectionString'
              RunAsPreJob: false

          - task: PowerShell@2
            displayName: 'Extract Settings for Transform'
            inputs:
              targetType: 'inline'
              script: |
                $zipPath = Get-ChildItem -Path "$(Pipeline.Workspace)/drop" -Filter *.zip | Select-Object -First 1 -ExpandProperty FullName
                Write-Host "Found zip file at: $zipPath"
                
                # Create a temp directory
                $tempDir = Join-Path "$(Pipeline.Workspace)" "temp"
                New-Item -ItemType Directory -Path $tempDir -Force
                
                # Extract just the settings file
                Add-Type -AssemblyName System.IO.Compression.FileSystem
                $zip = [System.IO.Compression.ZipFile]::OpenRead($zipPath)
                $settingsEntry = $zip.Entries | Where-Object { $_.Name -eq "local.settings.json" }
                if ($settingsEntry) {
                    $settingsEntry.ExtractToFile([System.IO.Path]::Combine($tempDir, "local.settings.json"), $true)
                }
                $zip.Dispose()
                
                Write-Host "Extracted settings file for transformation"

          - task: FileTransform@1
            inputs:
              folderPath: '$(Pipeline.Workspace)/temp'
              fileType: 'json'
              targetFiles: '**/local.settings.json'

          - task: PowerShell@2
            displayName: 'Update Zip with Transformed Settings'
            inputs:
              targetType: 'inline'
              script: |
                $zipPath = Get-ChildItem -Path "$(Pipeline.Workspace)/drop" -Filter *.zip | Select-Object -First 1 -ExpandProperty FullName
                $transformedSettings = Get-ChildItem -Path "$(Pipeline.Workspace)/temp" -Filter local.settings.json -Recurse | Select-Object -First 1
                
                Add-Type -AssemblyName System.IO.Compression.FileSystem
                $zip = [System.IO.Compression.ZipFile]::Open($zipPath, 'Update')
                $settingsEntry = $zip.GetEntry("local.settings.json")
                if ($settingsEntry) {
                    $settingsEntry.Delete()
                }
                [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zip, $transformedSettings.FullName, "local.settings.json")
                $zip.Dispose()
                
                Write-Host "Updated zip file with transformed settings"
              
          - task: AzureAppServiceManage@0
            displayName: 'Stop Function App'
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              Action: 'Stop Azure App Service'
              WebAppName: 'smd-function-prod'
              SpecifySlotOrASE: false
              
          - task: AzureFunctionApp@2
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              appName: 'smd-function-prod'
              appType: 'functionApp'
              package: '$(Pipeline.Workspace)/drop/*.zip'
              deploymentMethod: 'auto'
              enableGoogleAnalytics: false
              appSettings: >-
                -FUNCTIONS_WORKER_RUNTIME dotnet-isolated 
                -DOTNET_ISOLATED_RUNTIME_VERSION 8.0 
                -FUNCTIONS_EXTENSION_VERSION ~4
              
          - task: AzureAppServiceManage@0
            displayName: 'Start Function App'
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              Action: 'Start Azure App Service'
              WebAppName: 'smd-function-prod'
              SpecifySlotOrASE: false